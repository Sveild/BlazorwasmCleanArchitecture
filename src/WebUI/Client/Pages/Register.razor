@page "/register"

@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Register</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mud-height-full d-flex align-content-center flex-wrap">
    <MudPaper Class="pa-4 mud-width-full">
        <MudText Typo="Typo.h3">Register</MudText>
        <EditForm @ref="_form" Model="@_registerCommand" OnValidSubmit="OnValidSubmit">
            
            <DataAnnotationsValidator/>

            <MudTextField
                @bind-Value="_registerCommand.Email" For="@(() => _registerCommand.Email)"
                Immediate="true" InputType="InputType.Email" Label="Email"/>

            <MudTextField
                @bind-Value="_registerCommand.Password" For="@(() => _registerCommand.Password)"
                Immediate="true" Label="Password" InputType="_passwordInputType"
                Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon"
                OnAdornmentClick="ToggleShowPassword" AdornmentAriaLabel="Show Password"/>

            <MudTextField
                @bind-Value="_registerCommand.ConfirmPassword" For="@(() => _registerCommand.ConfirmPassword)"
                Immediate="true" Label="Email" InputType="_confirmPasswordInputType"
                Adornment="Adornment.End" AdornmentIcon="@_confirmPasswordInputIcon"
                OnAdornmentClick="ToggleShowConfirmPassword" AdornmentAriaLabel="Show Password"/>

            <div class="d-flex justify-center flex-grow-1 mt-4">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Register</MudButton>
            </div>

        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    private readonly RegisterCommand _registerCommand = new();

    private EditForm _form;
    
    private bool _showPassword;
    private InputType _passwordInputType = InputType.Password;
    private string _passwordInputIcon = Icons.Filled.VisibilityOff;

    private bool _showConfirmPassword;
    private InputType _confirmPasswordInputType = InputType.Password;
    private string _confirmPasswordInputIcon = Icons.Filled.VisibilityOff;

    private void ToggleShowPassword()
    {
        if (_showPassword)
        {
            _showPassword = false;
            _passwordInputType = InputType.Password;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
        }
        else {
            _showPassword = true;
            _passwordInputType = InputType.Text;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
        }
    }
    
    private void ToggleShowConfirmPassword()
    {
        if (_showConfirmPassword)
        {
            _showConfirmPassword = false;
            _confirmPasswordInputType = InputType.Password;
            _confirmPasswordInputIcon = Icons.Material.Filled.VisibilityOff;
        }
        else {
            _showConfirmPassword = true;
            _confirmPasswordInputType = InputType.Text;
            _confirmPasswordInputIcon = Icons.Material.Filled.Visibility;
        }
    }

    private async Task OnValidSubmit()
    {
        var result = await AuthService.Register(_registerCommand);

        if (result.Successful)
            NavigationManager.NavigateTo("/login");
    }
}