@page "/login"

@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Log in</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mud-height-full d-flex align-content-center flex-wrap">
    <MudPaper Class="pa-4 mud-width-full">
        <MudText Typo="Typo.h3">Login</MudText>
        <EditForm @ref="_form" Model="@_loginCommand" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            
            <MudTextField 
                @bind-Value="_loginCommand.Email" For="@(() => _loginCommand.Email)" 
                Immediate="true" InputType="InputType.Email" Label="Email"/>
            
            <MudTextField
                @bind-Value="_loginCommand.Password" For="@(() => _loginCommand.Password)"
                Immediate="true" Label="Password" InputType="_passwordInputType"
                Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon"
                OnAdornmentClick="ToggleShowPassword" AdornmentAriaLabel="Show Password"/>

            <div class="d-flex justify-center flex-grow-1 mt-4">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Log in</MudButton>
            </div>
        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    private readonly LoginCommand _loginCommand = new();

    private EditForm _form;
    
    private bool _showPassword;
    private InputType _passwordInputType = InputType.Password;
    private string _passwordInputIcon = Icons.Filled.VisibilityOff;

    private void ToggleShowPassword()
    {
        if (_showPassword)
        {
            _showPassword = false;
            _passwordInputType = InputType.Password;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
        }
        else {
            _showPassword = true;
            _passwordInputType = InputType.Text;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
        }
    }

    private async Task OnValidSubmit()
    {
        var result = await AuthService.Login(_loginCommand);

        if (result.Successful)
            NavigationManager.NavigateTo("/");
    }
}